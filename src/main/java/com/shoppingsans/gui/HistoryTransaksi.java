/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.shoppingsans.gui;

import com.fasterxml.jackson.databind.ser.std.StdKeySerializers.Default;
import com.shoppingsans.Bill.FixedBill;
import com.shoppingsans.Datastore.DataStore;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.xml.bind.JAXBException;

/**
 *
 * @author Matthew
 * @author Henry
 */
public class HistoryTransaksi extends javax.swing.JPanel {

    /**
     * Creates new form HistoryTransaksi
     */
    DataStore ds;
    private JTable tableHistory;
    private ArrayList<ArrayList<Object>> listHistory = new ArrayList<>();
    private ArrayList<ArrayList<Object>> tempList = new ArrayList<>();
    public HistoryTransaksi() throws JAXBException, IOException, FileNotFoundException, ClassNotFoundException {
        initComponents();
        ds = new DataStore();
        
        /* Masukkan ke ComboBox */
        for(int i = 0; i < ds.getUsers().getCustomers().size(); i++){
            jComboBox1.addItem(Integer.toString(ds.getUsers().getCustomers().get(i).getId())); 
        }
        
        /* Search through history, for every fixed bill that the selected user has made,
            add it to the table
        */
        ArrayList<FixedBill> listFixedBills = ds.getHistory().getListHistory();
        // get currentkurs
        int currentKurs = ds.getConfig().getMapKurs().get(ds.getConfig().getCurrentKurs());
        for (int i = 0 ; i < listFixedBills.size() ; i++)
        {
            FixedBill bill = listFixedBills.get(i);
            ArrayList<Object> list = new ArrayList<>();
            list.add(bill.getId());
            list.add(bill.getIdUser());
            list.add(bill.getDatetime());
            list.add((float) bill.getTotal() / currentKurs);
            listHistory.add(list);
        }

        /* Masukkan ke Table */
        tableHistory = createTable(convertToArray(listHistory));

        for (int i = tableHistory.getRowCount() - 1; i >= 0; i--) 
        {
            DefaultTableModel model = createTableModel(tableHistory);
            model.removeRow(i);
            tableHistory.setModel(model);
        }
    }
    public DefaultTableModel createTableModel(JTable table) {
        DefaultTableModel model = new DefaultTableModel();
        // add column names
        for (int i = 0; i < table.getColumnCount(); i++) {
            model.addColumn(table.getColumnName(i));
        }
        // add row data
        for (int i = 0; i < table.getRowCount(); i++) {
            Object[] row = new Object[table.getColumnCount()];
            for (int j = 0; j < table.getColumnCount(); j++) {
                row[j] = table.getValueAt(i, j);
            }
            model.addRow(row);
        }
        return model;
    }
    public JTable createTable(Object[][] data)
    {
        // get key from datastore mapkurs
        String key = ds.getConfig().getCurrentKurs();
        JTable retTable = new JTable(data, new Object[]{"ID", "ID Customer", "Tanggal", "Total" + " (" + key + ")"});
        JScrollPane scrollPane = new JScrollPane(retTable);
        scrollPane.setBounds(100, 350, 1000, 300);
        this.add(scrollPane);
        return retTable;
    }
    private Object[][] convertToArray(ArrayList<ArrayList<Object>> list) {
        Object[][] arr = new Object[list.size()][list.get(0).size()];
        for (int i = 0; i < list.size(); i++) 
        {
            ArrayList<Object> row = list.get(i);
            for (int j = 0; j < row.size(); j++) 
            {
                arr[i][j] = row.get(j);
            }
        }
        return arr;
    }
    public void resetTable()
    {
        for (int i = 0 ; i < tableHistory.getRowCount() ; i++)
        {
            DefaultTableModel model = createTableModel(tableHistory);
            model.removeRow(i);
            tableHistory.setModel(model);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(45, 43, 74));
        setPreferredSize(new java.awt.Dimension(1268, 685));

        jLabel2.setFont(new java.awt.Font("Myanmar Text", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID Customer");

        jComboBox1.setBackground(new java.awt.Color(217, 217, 217));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
                // panggil fungsi untuk reset tabelnya
                // System.out.println("11111");
                // resetTable();
                // System.out.println("22222");
                // panggil fungsi untuk menampilkan tabelnya
                if (ds.getConfig().getMapKurs().get(ds.getConfig().getCurrentKurs()) != null)
                {
                    try {
                        ds = new DataStore();
                        listHistory = new ArrayList<>();
                        ArrayList<FixedBill> listFixedBills = ds.getHistory().getListHistory();
                        int currentKurs = ds.getConfig().getMapKurs().get(ds.getConfig().getCurrentKurs());
                        for (int i = 0 ; i < listFixedBills.size() ; i++)
                        {
                            FixedBill bill = listFixedBills.get(i);
                            ArrayList<Object> list = new ArrayList<>();
                            list.add(bill.getId());
                            list.add(bill.getIdUser());
                            list.add(bill.getDatetime());
                            list.add((float) bill.getTotal() / currentKurs);
                            listHistory.add(list);
                        }
                    } catch (ClassNotFoundException | JAXBException | IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();
                    }
                }
                if (tableHistory !=null)
                {
                    for (int i = tableHistory.getRowCount() - 1; i >= 0; i--) 
                    {
                        DefaultTableModel model = createTableModel(tableHistory);
                        model.removeRow(i);
                        tableHistory.setModel(model);
                    }
                    for (int i = 0 ; i < listHistory.size() ; i++)
                    {
                        if (listHistory.get(i).get(1).toString().equals(jComboBox1.getSelectedItem().toString()))
                        {
                            DefaultTableModel model = createTableModel(tableHistory);
                            model.addRow(listHistory.get(i).toArray());
                            tableHistory.setModel(model);
                        }
                    }
                    String key = ds.getConfig().getCurrentKurs();
                    DefaultTableModel model = createTableModel(tableHistory);
                    model.setColumnIdentifiers(new String[] { "ID", "ID Customer", "Tanggal", "Total" + " (" + key + ")"});
                    tableHistory.setModel(model);
                }
            }
        });

        jLabel1.setFont(new java.awt.Font("Myanmar Text", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(242, 198, 111));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("History Transaksi");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(412, 412, 412)
                .addComponent(jLabel2)
                .addGap(64, 64, 64)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(475, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(149, 149, 149)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(378, 378, 378))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
